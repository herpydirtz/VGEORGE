import pyttsx3

def speak(audio):
    engine = pyttsx3.init()
    voices = engine.getProperty('voices')
    # [0] for male, [1] for female voice
    engine.setProperty('voice', voices[1].id)
    engine.say(audio)
    engine.runAndWait()


def measurements(amount, selection):
    selection = selection.lower().split()
    lengths = {"inches to feet":12,                     #made a small error, these conversions read as how many ____ can fit into ____ : ____
"inches to yards":36,
"inches to miles":63360,
"inches to kilometers":39370,
"inches to meters":39.37,
"inches to centimeters":0.3937,
"inches to millimeters":0.003937,
"inches to micrometers":0.00003937,
"inches to nanometers":0.00000003937,
"inches to picometers":0.00000000003937,
"feet to miles":5280,
"feet to kilometers":3280.84,
"feet to meters":3.28084,
"feet to centimeters":0.0328084,
"feet to millimeters":0.00328084,
"feet to micrometers":0.00000328084,
"feet to nanometers":0.00000000328084,
"feet to picometers":0.00000000000328084,
"feet to yards":3,
"yards to miles":1760,
"yards to kilometers":1093.61,
"yards to meters":1.9361,
"yards to centimeters":0.019361,
"yards to millimeters":0.0019361,
"yards to micrometers":0.0000019361,
"yards to nanometers":0.0000000019361,
"yards to picometers":0.0000000000019361,
"miles to kilometers":0.621371,
"miles to meters":0.000621371,
"miles to centimeters":0.00000621371,
"miles to millimeters":0.000000621371,
"miles to micrometers":0.000000000621371,
"miles to nanometers":0.000000000000621371,
"miles to picometers":0.000000000000000621371,
"kilometers to meters":0.001,
"kilometers to centimeters":0.00001,
"kilometers to millimeters":0.000001,
"kilometers to micrometers":0.000000001,
"kilometers to nanometers":0.000000000001,
"kilometers to picometers":0.000000000000001,
"meters to centimeters":0.01,
"meters to millimeters":0.001,
"meters to micrometers":0.000001,
"meters to nanometers":0.000000001,
"meters to picometers":0.000000000001,
"centimeters to millimeters":0.1,
"centimeters to micrometers":0.0001,
"centimeters to nanometers":0.0000001,
"centimeters to picometers":0.0000000001,
"millimeters to micrometers":0.001,
"millimeters to nanometers":0.000001,
"millimeters to picometers":0.000000001,
"micrometers to nanometers":0.001,
"micrometers to picometers":0.000001,
"nanometers to picometers":0.001}
    volumes = {'cubic meter to cubic kilometer':1E9,
'cubic meter to cubic centimeter':1E-6,
'cubic meter to cubic millimeter':1E-9,
'cubic meter to liter':0.001,
'cubic meter to milliliter':1E-6,
'cubic meter to gallon':0.00378541,
'cubic meter to quart':0.000946353,
'cubic meter to pint':0.000473176,
'cubic meter to cup':0.000236588,
'cubic meter to fluid ounce':2.95735E-5,
'cubic meter to table spoon':1.47868E-5,
'cubic meter to tea spoon':4.92892E-6,
'cubic meter to tablespoon':1.47868E-5,
'cubic meter to teaspoon':4.92892E-6,
'cubic meter to imperial gallon':0.00454609,
'cubic meter to imperial quart':0.00113652,
'cubic meter to imperial pint':0.000568261,
'cubic meter to imperial fluid ounce':2.84131E-5,
'cubic meter to imperial table spoon':1.77582E-5,
'cubic meter to imperial tea spoon':5.91939E-6,
'cubic meter to imperial tablespoon':1.77582E-5,
'cubic meter to imperial teaspoon':5.91939E-6,
'cubic meter to cubic mile':4.168E9,
'cubic meter to cubic yard':0.764555,
'cubic meter to cubic foot':0.0283168,
'cubic meter to cubic inch':1.6387E-5,
'cubic kilometer to cubic centimeter':1E-15,
'cubic kilometer to cubic millimeter':1E-18,
'cubic kilometer to liter':1E-12,
'cubic kilometer to milliliter':1E-15,
'cubic kilometer to gallon':3.78541E-12,
'cubic kilometer to quart':9.46353E-13,
'cubic kilometer to pint':4.73176E-13,
'cubic kilometer to cup':2.36588E-13,
'cubic kilometer to fluid ounce':2.95735E-14,
'cubic kilometer to table spoon':1.47868E-14,
'cubic kilometer to tea spoon':4.92892E-15,
'cubic kilometer to tablespoon':1.47868E-14,
'cubic kilometer to teaspoon':4.92892E-15,
'cubic kilometer to imperial gallon':4.54609E-12,
'cubic kilometer to imperial quart':1.13652E-12,
'cubic kilometer to imperial pint':5.68261E-13,
'cubic kilometer to imperial fluid ounce':2.84131E-14,
'cubic kilometer to imperial table spoon':1.77582E-14,
'cubic kilometer to imperial tea spoon':5.91939E-15,
'cubic kilometer to imperial tablespoon':1.77582E-14,
'cubic kilometer to imperial teaspoon':5.91939E-15,
'cubic kilometer to cubic mile':4.16818,
'cubic kilometer to cubic yard':7.64555E-10,
'cubic kilometer to cubic foot':2.83168E-11,
'cubic kilometer to cubic inch':1.63871E-14,
'cubic centimeter to cubic millimeter':.001,
'cubic centimeter to liter':1000,
'cubic centimeter to milliliter':1,
'cubic centimeter to gallon':3785.41,
'cubic centimeter to quart':946.353,
'cubic centimeter to pint':473.176,
'cubic centimeter to cup':236.588,
'cubic centimeter to fluid ounce':29.5735,
'cubic centimeter to table spoon':14.7868,
'cubic centimeter to tea spoon':4.92892,
'cubic centimeter to tablespoon':14.7868,
'cubic centimeter to teaspoon':4.92892,
'cubic centimeter to imperial gallon':4546.09,
'cubic centimeter to imperial quart':1136.52,
'cubic centimeter to imperial pint':568.261,
'cubic centimeter to imperial fluid ounce':28.4131,
'cubic centimeter to imperial table spoon':17.7582,
'cubic centimeter to imperial tea spoon':5.91939,
'cubic centimeter to imperial tablespoon':17.7582,
'cubic centimeter to imperial teaspoon':5.91939,
'cubic centimeter to cubic mile':4.168E15,
'cubic centimeter to cubic yard':764555,
'cubic centimeter to cubic foot':28316.8,
'cubic centimeter to cubic inch':16.3871,
'cubic millimeter to liter':1000000,
'cubic millimeter to milliliter':1000,
'cubic millimeter to gallon':3.785E6,
'cubic millimeter to quart':946353,
'cubic millimeter to pint':473176,
'cubic millimeter to cup':236588,
'cubic millimeter to fluid ounce':29573.5,
'cubic millimeter to table spoon':14786.8,
'cubic millimeter to tea spoon':4928.92,
'cubic millimeter to tablespoon':14786.8,
'cubic millimeter to teaspoon':4928.92,
'cubic millimeter to imperial gallon':4.546E6,
'cubic millimeter to imperial quart':1.137E6,
'cubic millimeter to imperial pint':568261,
'cubic millimeter to imperial fluid ounce':28413.1,
'cubic millimeter to imperial table spoon':17758.2,
'cubic millimeter to imperial tea spoon':5919.39,
'cubic millimeter to imperial tablespoon':17758.2,
'cubic millimeter to imperial teaspoon':5919.39,
'cubic millimeter to cubic mile':4.168E18,
'cubic millimeter to cubic yard':7.646E8,
'cubic millimeter to cubic foot':2.832E7,
'cubic millimeter to cubic inch':16387.1,
'milliliter to gallon':3785.41,
'milliliter to quart':946.353,
'milliliter to pint':473.176,
'milliliter to cup':236.588,
'milliliter to fluid ounce':29.5735,
'milliliter to table spoon':14.7868,
'milliliter to tea spoon':4.92892,
'milliliter to tablespoon':14.7868,
'milliliter to teaspoon':4.92892,
'milliliter to imperial gallon':4546.09,
'milliliter to imperial quart':1136.52,
'milliliter to imperial pint':568.261,
'milliliter to imperial fluid ounce':28.4131,
'milliliter to imperial table spoon':17.7582,
'milliliter to imperial tea spoon':5.91939,
'milliliter to imperial tablespoon':17.7582,
'milliliter to imperial teaspoon':5.91939,
'milliliter to cubic mile':4.168E15,
'milliliter to cubic yard':764555,
'milliliter to cubic foot':28316.8,
'milliliter to cubic inch':16.3871,
'gallon to quart':0.25,
'gallon to pint':0.125,
'gallon to cup':0.0625,
'gallon to fluid ounce':0.0078125,
'gallon to table spoon':0.00390625,
'gallon to tea spoon':0.00130208,
'gallon to tablespoon':0.00390625,
'gallon to teaspoon':0.00130208,
'gallon to imperial gallon':1.20095,
'gallon to imperial quart':0.300237,
'gallon to imperial pint':0.150119,
'gallon to imperial fluid ounce':0.00750594,
'gallon to imperial table spoon':0.00469121,
'gallon to imperial tea spoon':0.00156374,
'gallon to imperial tablespoon':0.00469121,
'gallon to imperial teaspoon':0.00156374,
'gallon to cubic mile':1.101E12,
'gallon to cubic yard':201.974,
'gallon to cubic foot':7.48052,
'gallon to cubic inch':0.004329,
'quart to pint':0.5,
'quart to cup':0.25,
'quart to fluid ounce':0.03125,
'quart to table spoon':0.015625,
'quart to tea spoon':0.00520833,
'quart to tablespoon':0.015625,
'quart to teaspoon':0.00520833,
'quart to imperial gallon':4.8038,
'quart to imperial quart':1.20095,
'quart to imperial pint':0.600475,
'quart to imperial fluid ounce':0.0300237,
'quart to imperial table spoon':0.0187649,
'quart to imperial tea spoon':0.00625495,
'quart to imperial tablespoon':0.0187649,
'quart to imperial teaspoon':0.00625495,
'quart to cubic mile':4.404E12,
'quart to cubic yard':807.896,
'quart to cubic foot':29.9221,
'quart to cubic inch':0.017316,
'pint to cup':0.5,
'pint to fluid ounce':0.0625,
'pint to table spoon':0.03125,
'pint to tea spoon':0.0104167,
'pint to tablespoon':0.03125,
'pint to teaspoon':0.0104167,
'pint to imperial gallon':9.6076,
'pint to imperial quart':2.4019,
'pint to imperial pint':1.20095,
'pint to imperial fluid ounce':0.0600475,
'pint to imperial table spoon':0.0375297,
'pint to imperial tea spoon':0.0125099,
'pint to imperial tablespoon':0.0375297,
'pint to imperial teaspoon':0.0125099,
'pint to cubic mile':8.809E12,
'pint to cubic yard':1615.79,
'pint to cubic foot':59.8442,
'pint to cubic inch':0.034632,
'cup to fluid ounce':0.125,
'cup to table spoon':0.0625,
'cup to tea spoon':0.0208333,
'cup to tablespoon':0.0625,
'cup to teaspoon':0.0208333,
'cup to imperial gallon':19.2152,
'cup to imperial quart':4.8038,
'cup to imperial pint':2.4019,
'cup to imperial fluid ounce':0.120095,
'cup to imperial table spoon':0.0750594,
'cup to imperial tea spoon':0.0250198,
'cup to imperial tablespoon':0.0750594,
'cup to imperial teaspoon':0.0250198,
'cup to cubic mile':1.762E13,
'cup to cubic yard':3231.58,
'cup to cubic foot':119.688,
'cup to cubic inch':0.0692641,
'fluid ounce to table spoon':0.5,
'fluid ounce to tea spoon':0.166667,
'fluid ounce to tablespoon':0.5,
'fluid ounce to teaspoon':0.166667,
'fluid ounce to imperial gallon':153.722,
'fluid ounce to imperial quart':38.4304,
'fluid ounce to imperial pint':19.2152,
'fluid ounce to imperial fluid ounce':0.96076034,
'fluid ounce to imperial table spoon':0.600475,
'fluid ounce to imperial tea spoon':0.200158,
'fluid ounce to imperial tablespoon':0.600475,
'fluid ounce to imperial teaspoon':0.200158,
'fluid ounce to cubic mile':1.409E14,
'fluid ounce to cubic yard':25852.7,
'fluid ounce to cubic foot':957.506,
'fluid ounce to cubic inch':0.554113,
'table spoon to tea spoon':0.333333,
'table spoon to teaspoon':0.333333,
'table spoon to imperial gallon':307.443,
'table spoon to imperial quart':76.8608,
'table spoon to imperial pint':38.4304,
'table spoon to imperial fluid ounce':1.92152,
'table spoon to imperial table spoon':1.20095,
'table spoon to imperial tea spoon':0.400317,
'table spoon to imperial tablespoon':1.20095,
'table spoon to imperial teaspoon':0.400317,
'table spoon to cubic mile':2.819E14,
'table spoon to cubic yard':51705.4,
'table spoon to cubic foot':1915.01,
'table spoon to cubic inch':1.10823,
'tablespoon to tea spoon':0.333333,
'tablespoon to teaspoon':0.333333,
'tablespoon to imperial gallon':307.443,
'tablespoon to imperial quart':76.8608,
'tablespoon to imperial pint':38.4304,
'tablespoon to imperial fluid ounce':1.92152,
'tablespoon to imperial table spoon':1.20095,
'tablespoon to imperial tea spoon':0.400317,
'tablespoon to imperial tablespoon':1.20095,
'tablespoon to imperial teaspoon':0.400317,
'tablespoon to cubic mile':2.819E14,
'tablespoon to cubic yard':51705.4,
'tablespoon to cubic foot':1915.01,
'tablespoon to cubic inch':1.10823,
'tea spoon to imperial gallon':922.33,
'tea spoon to imperial quart':230.582,
'tea spoon to imperial pint':115.291,
'tea spoon to imperial fluid ounce':5.76456,
'tea spoon to imperial table spoon':3.60285,
'tea spoon to imperial tea spoon':0.83267384,
'tea spoon to imperial tablespoon':3.60285,
'tea spoon to imperial teaspoon':0.83267384,
'tea spoon to cubic mile':8.457E14,
'tea spoon to cubic yard':155116,
'tea spoon to cubic foot':5745.04,
'tea spoon to cubic inch':3.32468,
'teaspoon to imperial gallon':922.33,
'teaspoon to imperial quart':230.582,
'teaspoon to imperial pint':115.291,
'teaspoon to imperial fluid ounce':5.76456,
'teaspoon to imperial table spoon':3.60285,
'teaspoon to imperial tea spoon':0.83267384,
'teaspoon to imperial tablespoon':3.60285,
'teaspoon to imperial teaspoon':0.83267384,
'teaspoon to cubic mile':8.457E14,
'teaspoon to cubic yard':155116,
'teaspoon to cubic foot':5745.04,
'teaspoon to cubic inch':3.32468,
'imperial gallon to imperial quart':0.25,
'imperial gallon to imperial pint':0.125,
'imperial gallon to imperial fluid ounce':0.00625,
'imperial gallon to imperial table spoon':0.00390625,
'imperial gallon to imperial tea spoon':0.00130208,
'imperial gallon to imperial tablespoon':0.00390625,
'imperial gallon to imperial teaspoon':0.00130208,
'imperial gallon to cubic mile':9.169E11,
'imperial gallon to cubic yard':168.179,
'imperial gallon to cubic foot':6.22884,
'imperial gallon to cubic inch':0.00360465,
'imperial quart to imperial pint':0.5,
'imperial quart to imperial fluid ounce':0.025,
'imperial quart to imperial table spoon':0.015625,
'imperial quart to imperial tea spoon':0.00520834,
'imperial quart to imperial tablespoon':0.015625,
'imperial quart to imperial teaspoon':0.00520834,
'imperial quart to cubic mile':3.667E12,
'imperial quart to cubic yard':672.714,
'imperial quart to cubic foot':24.9153,
'imperial quart to cubic inch':0.0144186,
'imperial pint to imperial fluid ounce':0.05,
'imperial pint to imperial table spoon':0.03125,
'imperial pint to imperial tea spoon':0.0104167,
'imperial pint to imperial tablespoon':0.03125,
'imperial pint to imperial teaspoon':0.0104167,
'imperial pint to cubic mile':7.335E12,
'imperial pint to cubic yard':1345.43,
'imperial pint to cubic foot':49.8307,
'imperial pint to cubic inch':0.0288372,
'imperial fluid ounce to imperial table spoon':0.625,
'imperial fluid ounce to imperial tea spoon':0.208333,
'imperial fluid ounce to imperial tablespoon':0.625,
'imperial fluid ounce to imperial teaspoon':0.208333,
'imperial fluid ounce to cubic mile':1.467E14,
'imperial fluid ounce to cubic yard':26908.6,
'imperial fluid ounce to cubic foot':996.614,
'imperial fluid ounce to cubic inch':0.576744,
'imperial table spoon to imperial tea spoon':0.333333,
'imperial table spoon to imperial teaspoon':0.333333,
'imperial table spoon to cubic mile':2.347E14,
'imperial table spoon to cubic yard':43053.7,
'imperial table spoon to cubic foot':1594.58,
'imperial table spoon to cubic inch':0.92279,
'imperial tablespoon to imperial tea spoon':0.333333,
'imperial tablespoon to imperial teaspoon':0.333333,
'imperial tablespoon to cubic mile':2.347e+14,
'imperial tablespoon to cubic yard':43053.7,
'imperial tablespoon to cubic foot':1594.58,
'imperial tablespoon to cubic inch':0.92279,
'imperial tea spoon to cubic mile':7.042E14,
'imperial tea spoon to cubic yard':129161,
'imperial tea spoon to cubic foot':4783.74,
'imperial tea spoon to cubic inch':2.76837,
'imperial teaspoon to cubic mile':7.042E14,
'imperial teapoon to cubic yard':129161,
'imperial teaspoon to cubic foot':4783.74,
'imperial teaspoon to cubic inch':2.76837,
'cubic mile to cubic yard':1.83426E-10,
'cubic mile to cubic foot':6.79357E-12,
'cubic mile to cubic inch':3.93147E-15,
'cubic yard to cubic foot':0.037037,
'cubic yard to cubic inch':2.14335E-5,
'cubic foot to cubic inch':0.000578704
}
    areas = {"square micrometer to square millimeter":1E6,
"square micrometer to square centimeter":1E8,
"square micrometer to square meter":1E12,
"square micrometer to square kilometer":1E18,
"square micrometer to hectare":1E16,
"square micrometer to square mile":3.86102E19,
"square micrometer to square yard":8.361E11,
"square micrometer to square foot":9.29E10,
"square micrometer to square inch":6.452E8,
"square micrometer to acre":4.047E15,
"square millimeter to square centimeter":100,
"square millimeter to square meter":1E6,
"square millimeter to square kilometer":1E12,
"square millimeter to hectare":1E10,
"square millimeter to square mile":2.59E12,
"square millimeter to square yard":836127,
"square millimeter to square foot":92903,
"square millimeter to square inch":645.16,
"square millimeter to acre":4.047E9,
"square centimeter to square meter":10000,
"square centimeter to square kilometer":1E10,
"square centimeter to hectare":1E8,
"square centimeter to square mile":2.59E10,
"square centimeter to square yard":8361.27,
"square centimeter to square foot":929.03,
"square centimeter to square inch":6.4516,
"square centimeter to acre":40468564.45536,
"square meter to square kilometer":1E6,
"square meter to hectare":10000,
"square meter to square mile":2.59E6,
"square meter to square yard":0.836127,
"square meter to square foot":0.092903,
"square meter to square inch":0.00064516,
"square meter to acre":4046.86,
"square kilometer to hectare":0.01,
"square kilometer to square mile":2.58999,
"square kilometer to square yard":8.36127E-7,
"square kilometer to square foot":9.2903E-8,
"square kilometer to square inch":6.4516E-10,
"square kilometer to acre":0.00404686,
"hectare to square mile":258.999,
"hectare to square yard":8.36127E-5,
"hectare to square foot":9.2903E-6,
"hectare to square inch":6.4516E-8,
"hectare to acre":0.404686,
"square mile to square yard":3.22831E-7,
"square mile to square foot":3.58701E-8,
"square mile to square inch":2.49098E-10,
"square mile to acre":0.0015625,
"square yard to square foot":0.111111,
"square yard to square inch":0.000771605,
"square yard to acre":4840,
"square foot to square inch":0.006944444,
"square foot to acre":43560,
"square inch to acre":6.273E6,
"square micrometers to square millimeters":1E6,
"square micrometers to square centimeters":1E8,
"square micrometers to square meters":1E12,
"square micrometers to square kilometers":1E18,
"square micrometers to hectares":1E16,
"square micrometers to square miles":3.86102E19,
"square micrometers to square yards":8.361E11,
"square micrometers to square feet":9.29E10,
"square micrometers to square inches":6.452E8,
"square micrometers to acres":4.047E15,
"square millimeters to square centimeters":100,
"square millimeters to square meters":1E6,
"square millimeters to square kilometers":1E12,
"square millimeters to hectares":1E10,
"square millimeters to square miles":2.59E12,
"square millimeters to square yards":836127,
"square millimeters to square feet":92903,
"square millimeters to square inches":645.16,
"square millimeters to acres":4.047E9,
"square centimeters to square meters":10000,
"square centimeters to square kilometers":1E10,
"square centimeters to hectares":1E8,
"square centimeters to square miles":2.59E10,
"square centimeters to square yards":8361.27,
"square centimeters to square feet":929.03,
"square centimeters to square inchess":6.4516,
"square centimeters to acres":40468564.45536,
"square meters to square kilometers":1E6,
"square meters to hectares":10000,
"square meters to square miles":2.59E6,
"square meters to square yards":0.836127,
"square meters to square feet":0.092903,
"square meters to square inches":0.00064516,
"square meters to acres":4046.86,
"square kilometers to hectares":0.01,
"square kilometers to square miles":2.58999,
"square kilometers to square yards":8.36127E-7,
"square kilometers to square feet":9.2903E-8,
"square kilometers to square inches":6.4516E-10,
"square kilometers to acres":0.00404686,
"hectares to square miles":258.999,
"hectares to square yards":8.36127E-5,
"hectares to square feet":9.2903E-6,
"hectares to square inches":6.4516E-8,
"hectares to acres":0.404686,
"square miles to square yards":3.22831E-7,
"square miles to square feet":3.58701E-8,
"square miles to square inches":2.49098E-10,
"square miles to acres":0.0015625,
"square yards to square feet":0.111111,
"square yards to square inches":0.000771605,
"square yards to acres":4840,
"square feet to square inches":0.006944444,
"square feet to acres":43560,
"square inches to acres":6.273E6}
    Temperature = {"c to f": "A",
"c to k": "B",
"c to r": "C",
"f to k": "D",
"f to r": "E",
"k to r": "F",
"celsius to fahrenheit": "A",
"celsius to kelvin": "B",
"celsius to rankine": "C",
"fahrenheit to kelvin": "D",
"fahrenheit to rankine": "E",
"kelvin to rankine": "F",
}
    weights = {"kilogram to gram":0.001,
'kilogram to milligram':1E-6,
'kilogram to metric ton':1000,
'kilogram to long ton':1016.05,
'kilogram to short ton':907.185,
'kilogram to pound':0.453592,
'kilogram to ounce':0.0283495,
'kilogram to carat':0.0002,
'kilogram to atomic mass unit':1.66054E-27,
'kilogram to amu':1.66054E-27,
'kilogram to dalton':1.66054E-27,
'gram to milligram':0.001,
'gram to metric ton':1000000,
'gram to long ton':1.016E6,
'gram to short ton':907185,
'gram to pound':453.592,
'gram to ounce':28.3495,
'gram to carat':0.2,
'gram to atomic mass unit':1.66054E-24,
'gram to amu':1.66054E-24,
'gram to dalton':1.66054E-24,
'milligram to metric ton':1E9,
'milligram to long ton':1.016E9,
'milligram to short ton':9.072E8,
'milligram to pound':453592,
'milligram to ounce':28349.5,
'milligram to carat':200,
'milligram to atomic mass unit':1.66054E-21,
'milligram to amu':1.66054E-21,
'milligram to dalton':1.66054E-21,
'metric ton to long ton':1.01605,
'metric ton to short ton':0.907185,
'metric ton to pound':0.000453592,
'metric ton to ounce':2.83495E-5,
'metric ton to carat':2E-7,
'metric ton to atomic mass unit':1.6605E-30,
'metric ton to amu':1.6605E-30,
'metric ton to dalton':1.6605E-30,
'long ton to short ton':0.892857,
'long ton to pound':0.000446429,
'long ton to ounce':2.79018E-5,
'long ton to carat':1.96841E-7,
'long ton to atomic mass unit':1.63431E-30,
'long ton to amu':1.63431E-30,
'long ton to dalton':1.63431E-30,
'short ton to pound':0.0005,
'short ton to ounce':3.125E-5,
'short ton to carat':2.20462E-7,
'short ton to atomic mass unit':1.83043E-30,
'short ton to amu':1.83043E-30,
'short ton to dalton':1.83043E-30,
'pound to ounce':0.0625,
'pound to carat':0.000440925,
'pound to atomic mass unit':3.66086E-27,
'pound to amu':3.66086E-27,
'pound to dalton':3.66086E-27,
'ounce to carat':0.00705479,
'ounce to atomic mass unit':5.85738E-26,
'ounce to amu':5.85738E-26,
'ounce to dalton':5.85738E-26,
'carat to atomic mass unit':8.30269E-24,
'carat to amu':8.30269E-24,
'carat to dalton':8.30269E-24
}
    if "square" in selection: #change to be more dynamic
        multiple1, measurement1, dump, multiple2, measurement2 = selection
        scenario1 = f"{multiple1} {measurement1} to {multiple2} {measurement2}"
        scenario2 = f"{multiple2} {measurement2} to {multiple1} {measurement1}"
    else:
        measurement1, dump, measurement2 = selection
        scenario1 = f"{measurement1} to {measurement2}" #scenario 1 looks at the measurement selection and if it is larger i.e inches to feet it will divide by 12
        scenario2 = f"{measurement2} to {measurement1}" #scenario 2 does the opposite, will multiply by 2
    
    if scenario1 in lengths.keys():
        print(f'{amount} {measurement1} is equal to {round(float(amount) / float(lengths.get(scenario1)),2)} {measurement2}')
        speak(f'{amount} {measurement1} is equal to {round(float(amount) / float(lengths.get(scenario1)),2)} {measurement2}')
    elif scenario2 in lengths.keys():
        print(f'{amount} {measurement1} is equal to {round(float(lengths.get(scenario2)) * float(amount),2)} {measurement2}')
        speak(f'{amount} {measurement1} is equal to {round(float(lengths.get(scenario2)) * float(amount),2)} {measurement2}')
    elif scenario1 in Temperature.keys():
        if Temperature.get(scenario1) == "A":
            print(f"{amount} degrees Celsius is equal to {round(32 + (float(amount) * 1.8),2)} degrees Fahrenheit")
            speak(f"{amount} degrees Celsius is equal to {round(32 + (float(amount) * 1.8),2)} degrees Fahrenheit")
        elif Temperature.get(scenario1) == "B":
            print(f"{amount} degrees Celsius is equal to {round(273.15 + (float(amount)),2)} degrees Kelvin")
            speak(f"{amount} degrees Celsius is equal to {round(273.15 + (float(amount)),2)} degrees Kelvin")
        elif Temperature.get(scenario1) == "C":
            print(f"{amount} degrees Celsius is equal to {round((491.67 + (float(amount) * 1.8)),2)} degrees Rankine")
            speak(f"{amount} degrees Celsius is equal to {round((491.67 + (float(amount) * 1.8)),2)} degrees Rankine")
        elif Temperature.get(scenario1) == "D":
            print(f"{amount} degrees Fahrenheit is equal to {round(((float(amount)-32)* (5/9))+273.15,2)} degrees Kelvin")
            speak(f"{amount} degrees Fahrenheit is equal to {round(((float(amount)-32)* (5/9))+273.15,2)} degrees Kelvin")
        elif Temperature.get(scenario1) == "E":
            print(f"{amount} degrees Fahrenheit is equal to {round(float(amount)+459.67,2)}")
            speak(f"{amount} degrees Fahrenheit is equal to {round(float(amount)+459.67,2)}")
        elif Temperature.get(scenario1) == "F":
            print(f"{amount} degrees Kelvin is equal to {round(float(amount)  * 9/5,2)}")
            speak(f"{amount} degrees Kelvin is equal to {round(float(amount)  * 9/5,2)}")
    elif scenario2 in Temperature.keys():
        if Temperature.get(scenario2) == "A":
            print(f"{amount} degrees Fahrenheit is equal to {round((float(amount)-32)* (5/9),2)} degrees Celsius")
            speak(f"{amount} degrees Fahrenheit is equal to {round((float(amount)-32)* (5/9),2)} degrees Celsius")
        elif Temperature.get(scenario2) == "B":
            print(f"{amount} degrees Kelvin is equal to {round(float(amount)-273.15,2)} degrees Celsius")
            speak(f"{amount} degrees Kelvin is equal to {round(float(amount)-273.15,2)} degrees Celsius")
        elif Temperature.get(scenario2) == "C":
            print(f"{amount} degrees Rankine is equal to {round((float(amount) - 491.67) * (5/9),2)} degrees Celsius")
            speak(f"{amount} degrees Rankine is equal to {round((float(amount) - 491.67) * (5/9),2)} degrees Celsius")
        elif Temperature.get(scenario2) == "D":
            print(f"{amount} degrees Kelvin is equal to {round(((float(amount)-273.15) * 1.8)+32,2)} degrees Fahrenheit")
            speak(f"{amount} degrees Kelvin is equal to {round(((float(amount)-273.15) * 1.8)+32,2)} degrees Fahrenheit")
        elif Temperature.get(scenario2) == "E":
            print(f"{amount} degrees Rankine is equal to {round(float(amount) - 459.67,2)} degrees Fahrenheit")
            speak(f"{amount} degrees Rankine is equal to {round(float(amount) - 459.67,2)} degrees Fahrenheit")
        elif Temperature.get(scenario2) == "F":
            print(f"{amount} degrees Rankine is equal to {round(float(amount) * (5/9),2)} degrees Kelvin")
            speak(f"{amount} degrees Rankine is equal to {round(float(amount) * (5/9),2)} degrees Kelvin")
    elif scenario1 in areas.keys():
        print(f'{amount} {multiple1} {measurement1} is equal to {round(float(amount) / float(areas.get(scenario1)),2)} {multiple2} {measurement2}')
        speak(f'{amount} {multiple1} {measurement1} is equal to {round(float(amount) / float(areas.get(scenario1)),2)} {multiple2} {measurement2}')
    elif scenario2 in areas.keys():
        print(f'{amount} {multiple1} {measurement1} is equal to {round(float(areas.get(scenario2)) * float(amount),2)} {multiple2} {measurement2}')
        speak(f'{amount} {multiple1} {measurement1} is equal to {round(float(areas.get(scenario2)) * float(amount),2)} {multiple2} {measurement2}')
    elif scenario1 in weights.keys():
        print(f'{amount} {measurement1} is equal to {round(float(amount) / float(weights.get(scenario1)),2)} {measurement2}')
        speak(f'{amount} {measurement1} is equal to {round(float(amount) / float(weights.get(scenario1)),2)} {measurement2}')    
    elif scenario2 in weights.keys():
        print(f'{amount} {measurement1} is equal to {round(float(weights.get(scenario2)) * float(amount),2)} {measurement2}')
        speak(f'{amount} {measurement1} is equal to {round(float(weights.get(scenario2)) * float(amount),2)} {measurement2}')  
    elif scenario1 in volumes.keys():
        print(f'{amount} {multiple1} {measurement1} is equal to {round(float(amount) / float(volumes.get(scenario1)),2)} {multiple2} {measurement2}')
        speak(f'{amount} {multiple1} {measurement1} is equal to {round(float(amount) / float(volumes.get(scenario1)),2)} {multiple2} {measurement2}')
    elif scenario2 in volumes.keys():
        print(f'{amount} {multiple1} {measurement1} is equal to {round(float(volumes.get(scenario2)) * float(amount),2)} {multiple2} {measurement2}')
        speak(f'{amount} {multiple1} {measurement1} is equal to {round(float(volumes.get(scenario2)) * float(amount),2)} {multiple2} {measurement2}')
    else:
        print("invalid input, please try again.")

